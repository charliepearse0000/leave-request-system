services: 
  app:
    build: 
      context: .
      dockerfile: Dockerfile.dev
    container_name: lm_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=lm_postgres
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - PORT=${PORT}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    command: ["npm", "run", "dev"]
    networks:
      - lm_network

  postgres:
      image: postgres:17-alpine
      container_name: lm_postgres
      extra_hosts:
        - host.docker.internal:host-gateway
      environment:
        - POSTGRES_USER=${DB_USERNAME}
        - POSTGRES_PASSWORD=${DB_PASSWORD}
        - POSTGRES_DB=${DB_DATABASE}
      ports:
        - "5432:5432"
      networks:
        - lm_network
      volumes:
        - postgres_data:/var/lib/postgresql/data
        - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 10s

volumes:
  postgres_data: 

networks:
  lm_network:
    driver: bridge